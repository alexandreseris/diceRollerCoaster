lancement: 
npm run serve

npm 6.14.*

create project:
vue cli 4.5.6
vue create dicerollercoaster
? Please pick a preset: Manually select features
? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex, CSS Pre-processors
? Choose a version of Vue.js that you want to start the project with 2.x
? Use history mode for router? (Requires proper server setup for index fallback in production) Yes
? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files
? Save this as a preset for future projects? No


dep:
cd dicerollercoaster
vue add vuetify (2.3.10)
? Choose a preset: Prototype (rapid development)
npm install axios


TODO:
    logique:
        trouver un meilleur système pour stocker les fonctions transverses (mettre dans des fichiers séparés pour faire des modules)
        /!\ LA GESTION DU TWO WAY BINDING EST UNE PLAIE, voir si moyen de faire mieux => écrire une fonction ou un composant wrapper qui gèrerait tout, ex:
            coté parent:
                @update-item
                @insert-item
                @delete-item
                derrière une fonction générique serait appelé pour mettre à jour la liste de composant
                comment faire pour cibler la liste à mettre à jour sans dupliquer les données => passer la liste de component en param de la fonction qui fait la maj.?.?.?.?.
            coté enfant:
                l'enfant émetterait un event de type: this.$emit(crudOperation, componentName, componentId, {field1: value1, field2: value2})
                comment rattacher le bouton pour insert au composant enfant directement???

        pour l'ajout la modif et la suppr d'element cf https://vuetifyjs.com/en/components/data-tables/#edit-dialog et https://vuetifyjs.com/en/components/data-tables/#simple-checkbox
        voir pour le two way binding avec .sync sur v-model
        voir si possible de déplacer les éléments (et d'update les listes en conséquences)
        faire des boutons ajouter et supprimer pour: points, statistiques
            ajouter un menu contextuel au clic droit pour: set les props (couleur), supprimer: https://vuetifyjs.com/en/components/menus/
            faire la remonté d'info du composant vers le data du parent et garder bien tout à jour
            à l'ajout d'élement, vérifier si la clef n'existe pas déjà
        validation des fields type number, intégrer les min et max
        faire les deux autres vues new profil et select profil
        si possible au double clic sur un elem du tableau faire pop un input pour changer la valeur
        commencer à voir le stockage des données dans vuex, stacker les données quand il y a un changement et écrire une fonction de test pour envoi au srv
            principe:
                au changement d'une valeur d'un input, enregistrer dans un objet stocké dans vuex
                puis faire apparaitre un bouton valider et annuler en haut à droite de l'écran
                à la validation, on envoi toutes les modifications enregistrées
                à l'annulation on vide complètement l'objet
        au changement de page, prompt pour sauvegarder les modifications
        faire un stockage séparé qui contiendra la page affichée à la fermeture de la session et l'affichage ou le cachages des éléments
    esthétique:
        faire les boutons pour cacher les éléments sur chaque partie
        revoir pour passer tout le display flex en vue directement pour plus de cohérence
        espacer les différents éléments entre eux (notamment en hauteur)
        intégrer les title tooltip vuetify
        revoir la taille du menu qui est pas complètement égal