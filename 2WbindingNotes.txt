le two way binding child-parent se fait uniquement via les props de l'enfant
sur le parent
    v-bind:propEnfant.sync="atttributDuparent"
    ça passe atttributDuparent en v-model et un event est ajouté automatiquement sur update:atttributDuparent, quand l'event trigger on maj autoamtiquement atttributDuparent
sur l'enfant
    v-model="propEnfant"
    @input="$emit('update:propEnfant', propEnfant);"
    ou pour les elem autres que des input, on maj la prop et on envoit l'event

si jamais la prop est passé en data niveau enfant et que data est utilisé à la place de la prop:
    la mise à jour parent vers enfant ne pourra pas se faire car à priori l'enfant n'est pas rerendu avec les données de la prop mais celle de data

à noter que le two way binding fait via les props déclenche un warn vue js dans la console car la mutation de prop est déconseillé (mais y a pas moyen de faire autrement....)

il n'existe à priori pas de two way binding pour les insert ou delete d'élément (liste de composant enfant dans parent), il faut gérer le tout à la main avec des events :|
  attention à l'insert qui normalement ne devrait pas etre sur l'enfant mais sur le parent!
----------------------------------------------------------------------------------------------------------------------------------

PARENT ELEM
-----------

<template>
  <div id="app">
    <h3>Parent Component</h3>
    <p>Parent data is : {{ parentData }}</p>
    <button @click="parentData='parent'">change parent value</button>
    <SampleComponent :inputData.sync="parentData" />
  </div>
</template>

<script>
import SampleComponent from "./components/SampleComponent.vue";
export default {
  name: "App",
  data: function() {
    return {
      parentData: "Jithil"
    };
  },
  components: {
    SampleComponent
  }
};
</script>

----------------------------------------------------------------------------------------------------------------------------------

CHILD ELEM
----------
<template>
  <div class="child-component">
    <h3>Child Component</h3>
    <input
      type="text"
      v-model="inputData"
      @input="$emit('update:inputData', inputData);"
    />
    <button @click="inputData='child'; $emit('update:inputData', inputData);">change child value</button>
    <p>Child data is: {{ inputData }}</p>
  </div>
</template>
<script>
export default {
  name: "SampleComponent",
  props: {
    inputData: String
  }
};
</script>

----------------------------------------------------------------------------------------------------------------------------------